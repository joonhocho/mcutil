import { KeyType } from './types/types.js';
export declare const addItem: <T>(arr: T[], item: T) => boolean;
export declare const removeItem: <T>(arr: T[], item: T) => number;
export declare const replaceItem: <T>(arr: T[], oldItem: T, newItem: T, pushIfNotFound?: boolean) => number;
export declare const withoutNil: <T>(arr: (T | null | undefined)[]) => T[];
export declare const arraysEqual: <T>(a1: T[], a2: T[], itemsEqual?: ((a: T, b: T) => boolean) | undefined) => boolean;
export declare const dedup: <T>(arr: T[], toId: (item: T) => KeyType) => T[];
export declare const dedupKeys: <T extends KeyType>(arr: T[]) => T[];
export declare const findLast: <T>(arr: T[], predicate: (item: T, index: number, list: T[]) => any) => T | undefined;
export declare const findLastIndex: <T>(arr: T[], predicate: (item: T, index: number, list: T[]) => any) => number;
export declare const emptyToNull: <T>(arr: T[]) => T[] | null;
export declare const moveItem: <T>(arr: T[], index: number, delta: number) => T[];
export declare const keysToMap: <T extends KeyType, V>(arr: T[], val: V) => Record<string, V>;
export declare const arrayToMap: <T>(arr: T[], getKey: (item: T) => string | number) => Record<string, T>;
export declare const keysSubtract: <T extends KeyType>(a: T[], b: T[]) => T[];
export declare const arraySubtract: <T>(a: T[], b: T[], getKey: (item: T) => string | number) => T[];
export declare const keysIntersection: <T extends KeyType>(a: T[], b: T[]) => T[];
export declare const arrayIntersection: <T>(a: T[], b: T[], getKey: (item: T) => string | number) => T[];
export declare const arrayToKeys: <T extends KeyType, V>(list: T[], map: (item: T, index: number, list: T[]) => V) => Record<string, V>;
export declare const arrayMutate: <Out, T>(out: Out, arr: T[], mutate: (out: Out, item: T, index: number, list: T[]) => void) => Out;
