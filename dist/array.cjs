"use strict";Object.defineProperty(exports, "__esModule", {value: true});var T=(e,r)=>e.indexOf(r)===-1?(e.push(r),!0):!1,u= exports.removeItem =(e,r)=>{let n=e.indexOf(r);return n!==-1&&e.splice(n,1),n},c= exports.replaceItem =(e,r,n,t)=>{let i=e.indexOf(r);if(i===-1){if(t)return e.push(n),e.length-1}else e[i]=n;return i},f= exports.withoutNil =e=>e.filter(r=>r!=null),p= exports.arraysEqual =(e,r,n)=>{if(e===r)return!0;if(e.length!==r.length)return!1;if(n){for(let t=0,i=e.length;t<i;t+=1)if(!n(e[t],r[t]))return!1}else for(let t=0,i=e.length;t<i;t+=1)if(e[t]!==r[t])return!1;return!0},g= exports.dedup =(e,r)=>{if(e.length<=1)return e.slice();let n={};return e.filter(t=>{let i=r(t);return n[i]===1?!1:(n[i]=1,!0)})},d= exports.dedupKeys =e=>{if(e.length<=1)return e.slice();let r={};return e.filter(n=>r[n]===1?!1:(r[n]=1,!0))},x= exports.findLast =(e,r)=>{for(let n=e.length-1;n>=0;n-=1){let t=e[n];if(r(t,n,e))return t}},m= exports.findLastIndex =(e,r)=>{for(let n=e.length-1;n>=0;n-=1){let t=e[n];if(r(t,n,e))return n}return-1},h= exports.emptyToNull =e=>e.length?e:null,y= exports.moveItem =(e,r,n)=>{if(e.length<=1)return e;let t=r+n;if(t=t<=0?0:t>=e.length-1?e.length-1:t,t===r)return e;let[i]=e.splice(r,1);return e.splice(t,0,i),e},o= exports.keysToMap =(e,r)=>{let n={};for(let t=0,i=e.length;t<i;t+=1)n[e[t]]=r;return n},l= exports.arrayToMap =(e,r)=>{let n={};for(let t=0,i=e.length;t<i;t+=1){let s=e[t];n[r(s)]=s}return n},b= exports.keysSubtract =(e,r)=>{if(!e.length||!r.length)return e.slice();let n=o(r,1);return e.filter(t=>n[t]!==1)},a= exports.arraySubtract =(e,r,n)=>{if(!e.length||!r.length)return e.slice();let t=l(r,n);return e.filter(i=>!(n(i)in t))},R= exports.keysIntersection =(e,r)=>{if(!e.length||!r.length)return[];let n=o(r,1);return e.filter(t=>n[t]===1)},V= exports.arrayIntersection =(e,r,n)=>{if(!e.length||!r.length)return[];let t=l(r,n);return e.filter(i=>n(i)in t)},I= exports.arrayToKeys =(e,r)=>{let n={};for(let t=0,i=e.length;t<i;t+=1){let s=e[t];n[s]=r(s,t,e)}return n},K= exports.arrayMutate =(e,r,n)=>{for(let t=0,i=r.length;t<i;t+=1)n(e,r[t],t,r);return e};exports.addItem = T; exports.arrayIntersection = V; exports.arrayMutate = K; exports.arraySubtract = a; exports.arrayToKeys = I; exports.arrayToMap = l; exports.arraysEqual = p; exports.dedup = g; exports.dedupKeys = d; exports.emptyToNull = h; exports.findLast = x; exports.findLastIndex = m; exports.keysIntersection = R; exports.keysSubtract = b; exports.keysToMap = o; exports.moveItem = y; exports.removeItem = u; exports.replaceItem = c; exports.withoutNil = f;
